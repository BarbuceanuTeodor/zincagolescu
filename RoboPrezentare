/* Copyright (c) 2017 FIRST. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted (subject to the limitations in the disclaimer below) provided that
 * the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list
 * of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice, this
 * list of conditions and the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 *
 * Neither the name of FIRST nor the names of its contributors may be used to endorse or
 * promote products derived from this software without specific prior written permission.
 *
 * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS
 * LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;


@TeleOp(name="Prezentare", group="")

public class RoboPrezentare extends LinearOpMode {


    private DcMotor leftDrive;
    private DcMotor rightDrive;
    private DcMotor spinDrive;
    private DcMotor Brat;
    private Servo ServoDreapta;
    private Servo ServoStanga;


    @Override
    public void runOpMode() {
        double miscare;
        double variabila;
        double spin=1;
        leftDrive = hardwareMap.dcMotor.get("MotorStanga");
        rightDrive = hardwareMap.dcMotor.get("MotorDreapta");
        spinDrive = hardwareMap.dcMotor.get("Motor3");
        Brat = hardwareMap.dcMotor.get("Brat");
        ServoDreapta = hardwareMap.servo.get("ServoDreapta");
        ServoStanga = hardwareMap.servo.get("ServoStanga");

        telemetry.addData("Status", "Initialized");
        telemetry.update();
        ServoDreapta.setDirection(Servo.Direction.REVERSE);
        waitForStart();
        if (opModeIsActive()) {
            while (opModeIsActive()) {
                while (gamepad1.dpad_up){
                    leftDrive.setPower(-1);
                    rightDrive.setPower(1);
                    if (!(gamepad1.dpad_up)){
                        leftDrive.setPower(0);
                        rightDrive.setPower(0);
                        break;
                    }
                }
                while (gamepad1.dpad_down){
                    leftDrive.setPower(1);
                    rightDrive.setPower(-1);
                    if (!(gamepad1.dpad_up)){
                        leftDrive.setPower(0);
                        rightDrive.setPower(0);
                        break;
                    }
                }
                while (gamepad1.dpad_right){
                    spinDrive.setPower(spin);
                    if (!gamepad1.dpad_right){
                        spinDrive.setPower(0);
                        break;
                    }
                }
                while (gamepad1.dpad_left){
                    spinDrive.setPower(-spin);
                    if (!gamepad1.dpad_left){
                        spinDrive.setPower(0);
                        break;
                    }
                }
                miscare = gamepad1.right_stick_y;
                Brat.setPower(miscare);
                telemetry.addData("Target Power", miscare);
                telemetry.addData("Motor Power", Brat.getPower());
                if (gamepad1.y){
                    ServoDreapta.setPosition(1);
                    ServoStanga.setPosition(1);
                }
                if (gamepad1.a){
                    ServoStanga.setPosition(0);
                    ServoDreapta.setPosition(0.6);
                }
                telemetry.addData("Servo Position", ServoDreapta.getPosition());
                telemetry.addData("Servo Position", ServoStanga.getPosition());
                telemetry.update();

            }
        }
    }
}
