package org.firstinspires.ftc.teamcode;

import android.app.Activity;
import android.view.View;

import com.qualcomm.hardware.bosch.BNO055IMU;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.ColorSensor;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;

import org.firstinspires.ftc.robotcore.external.navigation.Orientation;

@Autonomous(name= "CodNou")
public class CodNou extends LinearOpMode {
    BNO055IMU imu;
    Orientation angles;
    public DcMotor MotorDF = null;
    public DcMotor MotorSF = null;
    public DcMotor MotorDJ = null;
    public DcMotor MotorSJ = null;
    public ColorSensor sensorColor;
    //public ColorSensor sensorColor2;
    public Servo Servomotor1 = null;
    public Servo Servomotor2 = null;
    int[] Skystones = new int[6];
    int i = 0;
    int brat = 0;
    int valoareskystone1 = 0;
    int valoareskystone2 = 0;
    int pozitiemotor = 0;
    int pozitiemotor2 = 0;
    int inapoi = 0;
    double power = 1;


    @Override
    public void runOpMode() {

        BNO055IMU.Parameters parameters = new BNO055IMU.Parameters();
        parameters.angleUnit = BNO055IMU.AngleUnit.DEGREES;
        //am configurat gyroul integrat si i-am definit unitatea de masura

        MotorDF = hardwareMap.dcMotor.get("Tright_drive");
        MotorDJ = hardwareMap.dcMotor.get("Bright_drive");
        MotorSF = hardwareMap.dcMotor.get("Tleft_drive");
        MotorSJ = hardwareMap.dcMotor.get("Bleft_drive");

        MotorSJ.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        MotorSF.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        MotorDJ.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        MotorDF.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        //am regasit printe elementele robotului conectate le hub cele 4 motoare

        Servomotor1 = hardwareMap.servo.get("Servo1");
        Servomotor2 = hardwareMap.servo.get("Servo2");
        //servomotorul

        sensorColor = hardwareMap.get(ColorSensor.class, "Lsensor_color2");
        //sensorColor2 = hardwareMap.get(ColorSensor.class, "Lsensor_color2");
        //senzorul de culoare

        MotorSF.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        MotorSJ.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        MotorDF.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        MotorDJ.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        MotorSF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorSJ.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorDF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorDJ.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        //se reseteaza valorile encoderelor pentru cele doua motoare de stanga la 0
        //motoarele de stanga isis iau ca referinta pozitia initiala

        float hsvValues[] = {0F, 0F, 0F};

        final float values[] = hsvValues;

        final double SCALE_FACTOR = 255;
        /*initializam valorile RBG intr-un array(vector)
        aceste valori percepute in RGB se vor inmulgii cu o constanta=255
        astefl vectorul va contive valori hsv
        */

        int relativeLayoutId = hardwareMap.appContext.getResources().getIdentifier("RelativeLayout", "id", hardwareMap.appContext.getPackageName());
        final View relativeLayout = ((Activity) hardwareMap.appContext).findViewById(relativeLayoutId);
        /*se initializeaza culoarea initiala alba a robotcontrollerului
        astefl atat timp cat senzorul va identifica o culoare, ecranul telefonului isi va schimba culoarea
        folosind datele primite din telemetrie
         */

        imu = hardwareMap.get(BNO055IMU.class, "imu");
        imu.initialize(parameters);
        //am identificat gyroul integrat printre componentele robotului

        telemetry.addData("Mode", "Waiting");
        telemetry.update();
        //am actuaizat datele din telemetrie

        waitForStart();

        telemetry.addData("Mode", "running");
        telemetry.update();
        DiagonalaSJos();

       if (!MotorSF.isBusy() && !MotorDJ.isBusy()) {
           MotorSF.setPower(0);
           MotorSJ.setPower(0);
           MotorDF.setPower(0);
           MotorDJ.setPower(0);
       }
       // am mers pe diag
/*        resetStartTime();
        //timpul este resetat

       while (opModeIsActive() && getRuntime() < 5) {
            telemetry.addData("encoder-fwd-end", MotorSF.getCurrentPosition() + "  busy=" + MotorSF.isBusy());
            telemetry.addData("encoder-fwd-end", MotorSJ.getCurrentPosition() + "  busy=" + MotorSJ.isBusy());
            telemetry.addData("encoder-fwd-end", MotorDF.getCurrentPosition() + "  busy=" + MotorDF.isBusy());
            telemetry.addData("encoder-fwd-end", MotorDJ.getCurrentPosition() + "  busy=" + MotorDJ.isBusy());
            telemetry.update();
            idle();
            //se verifica daca motoarele si-au indeplinit numarul de pulsatii
       }

        MotorSF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorSJ.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorDF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorDJ.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        MotorSF.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorSJ.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorDF.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorDJ.setMode(DcMotor.RunMode.RUN_TO_POSITION);

        MotorSF.setTargetPosition(300);
        MotorSJ.setTargetPosition(-300);
        MotorDF.setTargetPosition(300);
        MotorDJ.setTargetPosition(-300);

        MotorSF.setPower(-0.3);
        MotorSJ.setPower(0.3);
        MotorDF.setPower(-0.3);
        MotorDJ.setPower(0.3);

        telemetry.addData("Functionare", "Running");
        telemetry.addData("position",MotorDF.getTargetPosition());
        telemetry.update();
        telemetry.addData("Functionare", "Running2");
        telemetry.addData("position",MotorDF.getTargetPosition());
        telemetry.update();
        telemetry.addData("Functionare", "Running2");
        telemetry.addData("position",MotorDF.getTargetPosition());
        telemetry.update();
        telemetry.addData("Functionare", "Running2");
        telemetry.addData("position",MotorDF.getTargetPosition());
        telemetry.update();

        if (!MotorSF.isBusy() && !MotorDJ.isBusy() && !MotorDF.isBusy() && !MotorSJ.isBusy()) {
            MotorSF.setPower(0);
            MotorSJ.setPower(0);
            MotorDF.setPower(0);
            MotorDJ.setPower(0);
        }

       /*
        //am setat puterea
        MotorSF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorSJ.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorDF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorDJ.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        MotorSF.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorSJ.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorDF.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorDJ.setMode(DcMotor.RunMode.RUN_TO_POSITION);

        MotorSF.setTargetPosition(18947);
        MotorSJ.setTargetPosition(18947);
        MotorDF.setTargetPosition(-18947);
        MotorDJ.setTargetPosition(-18947);


        while (power>0.3) {
            MotorSF.setPower(power);
            MotorSJ.setPower(power);
            MotorDF.setPower(-power);
            MotorDJ.setPower(-power);
            power=power*0.5;
        }
        Servomotor1.setPosition(0);

        while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy())
        //cat timp opMode este activ si cele doua motoare sunt ocupate
        {
            Color.RGBToHSV((int) (sensorColor.red() * SCALE_FACTOR),
                    (int) (sensorColor.green() * SCALE_FACTOR),
                    (int) (sensorColor.blue() * SCALE_FACTOR),
                    hsvValues);

            //am masurat datele senzorului de culoare
            telemetry.addData("Alpha", sensorColor.alpha());
            telemetry.addData("Red  ", sensorColor.red());
            telemetry.addData("Green", sensorColor.green());
            telemetry.addData("Blue ", sensorColor.blue());
            telemetry.addData("Hue", hsvValues[0]);
            //am updatat telemetria pentru senzorul de culoare


            relativeLayout.post(new Runnable() {
                public void run() {
                    relativeLayout.setBackgroundColor(Color.HSVToColor(0xff, values));

                }
            });
            angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
            telemetry.addData("Heading: ", angles.firstAngle);
            telemetry.addData("Roll: ", angles.secondAngle);
            telemetry.addData("Pitch", angles.thirdAngle);
            telemetry.addData("encoder-fwd", MotorSF.getCurrentPosition() + "  busy=" + MotorSF.isBusy());
            telemetry.addData("encoder-fwd", MotorSJ.getCurrentPosition() + "  busy=" + MotorSJ.isBusy());
            telemetry.addData("encoder-fwd", MotorDF.getCurrentPosition() + "  busy=" + MotorDF.isBusy());
            telemetry.addData("encoder-fwd", MotorDJ.getCurrentPosition() + "  busy=" + MotorDJ.isBusy());
            //am obtinut datele despre pozitia robotului pe axele XYZ cu ajutorul Gyroului
            telemetry.update();

            if ((sensorColor.red() <=27 && sensorColor.red()>=14 && sensorColor.blue() <=31 && sensorColor.blue()>=18 && sensorColor.green() <=36 && sensorColor.green()>=21) && brat == 0) {
                culoare1vedenegru();
                colectareSkyStone();
                brat = 1;
            } else if (sensorColor.red() <=27 && sensorColor.red()>=14 && sensorColor.blue() <=31 && sensorColor.blue()>=18 && sensorColor.green() <=36 && sensorColor.green()>=21 && brat == 1) {
                culoarenegrudarbratesteocupat();
                brat = 0;
            }

            idle();
            i++;
            //la finalul buclei while robotul se opreste
        }
        MotorSF.setPower(0);
        MotorSJ.setPower(0);
        MotorDF.setPower(0);
        MotorDJ.setPower(0);

        resetStartTime();
        //timpul este resetat

        while (opModeIsActive() && getRuntime() < 5) {
            telemetry.addData("encoder-fwd-end", MotorSF.getCurrentPosition() + "  busy=" + MotorSF.isBusy());
            telemetry.addData("encoder-fwd-end", MotorSJ.getCurrentPosition() + "  busy=" + MotorSJ.isBusy());
            telemetry.addData("encoder-fwd-end", MotorDF.getCurrentPosition() + "  busy=" + MotorDF.isBusy());
            telemetry.addData("encoder-fwd-end", MotorDJ.getCurrentPosition() + "  busy=" + MotorDJ.isBusy());
            telemetry.update();
            idle();
            //se verifica daca motoarele si-au indeplinit numarul de pulsatii
        }
        MotorSF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorSJ.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorDF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorDJ.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        MotorSF.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorSJ.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorDF.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorDJ.setMode(DcMotor.RunMode.RUN_TO_POSITION);

        MotorSF.setTargetPosition(valoareskystone1);
        MotorSJ.setTargetPosition(valoareskystone1);
        MotorDF.setTargetPosition(-valoareskystone1);
        MotorDJ.setTargetPosition(-valoareskystone1);

        MotorSF.setPower(0.5);
        MotorSJ.setPower(0.5);
        MotorDF.setPower(0.5);
        MotorDJ.setPower(0.5);

        while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy()) {
            angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
            telemetry.addData("Heading: ", angles.firstAngle);
            telemetry.addData("Roll: ", angles.secondAngle);
            telemetry.addData("Pitch", angles.thirdAngle);
            telemetry.update();
        }
        colectareSkyStone();

        resetStartTime();

        while (opModeIsActive() && getRuntime() < 5) {
            telemetry.addData("encoder-fwd-end", MotorSF.getCurrentPosition() + "  busy=" + MotorSF.isBusy());
            telemetry.addData("encoder-fwd-end", MotorSJ.getCurrentPosition() + "  busy=" + MotorSJ.isBusy());
            telemetry.addData("encoder-fwd-end", MotorDF.getCurrentPosition() + "  busy=" + MotorDF.isBusy());
            telemetry.addData("encoder-fwd-end", MotorDJ.getCurrentPosition() + "  busy=" + MotorDJ.isBusy());
            telemetry.update();
            idle();
            //se verifica daca motoarele si-au indeplinit numarul de pulsatii
        }

        MotorSF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorSJ.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorDF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorDJ.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        MotorSF.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorSJ.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorDF.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorDJ.setMode(DcMotor.RunMode.RUN_TO_POSITION);

        MotorSF.setTargetPosition(valoareskystone2);
        MotorSJ.setTargetPosition(valoareskystone2);
        MotorDF.setTargetPosition(valoareskystone2);
        MotorDJ.setTargetPosition(valoareskystone2);

        MotorSF.setPower(0.5);
        MotorSJ.setPower(0.5);
        MotorDF.setPower(0.5);
        MotorDJ.setPower(0.5);

        while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy()) {
            angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
            telemetry.addData("Heading: ", angles.firstAngle);
            telemetry.addData("Roll: ", angles.secondAngle);
            telemetry.addData("Pitch", angles.thirdAngle);
            telemetry.update();
        }
        colectareSkyStone();

        resetStartTime();
        while (opModeIsActive() && getRuntime() < 5) {
            telemetry.addData("encoder-fwd-end", MotorSF.getCurrentPosition() + "  busy=" + MotorSF.isBusy());
            telemetry.addData("encoder-fwd-end", MotorSJ.getCurrentPosition() + "  busy=" + MotorSJ.isBusy());
            telemetry.addData("encoder-fwd-end", MotorDF.getCurrentPosition() + "  busy=" + MotorDF.isBusy());
            telemetry.addData("encoder-fwd-end", MotorDJ.getCurrentPosition() + "  busy=" + MotorDJ.isBusy());
            telemetry.update();
            idle();
            //se verifica daca motoarele si-au indeplinit numarul de pulsatii
        }

        MotorSF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorSJ.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorDF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorDJ.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        MotorSF.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorSJ.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorDF.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorDJ.setMode(DcMotor.RunMode.RUN_TO_POSITION);

        MotorSF.setTargetPosition(inapoi);
        MotorSJ.setTargetPosition(inapoi);
        MotorDF.setTargetPosition(inapoi);
        MotorDJ.setTargetPosition(inapoi);

        MotorSF.setPower(-0.5);
        MotorSJ.setPower(-0.5);
        MotorDF.setPower(-0.5);
        MotorDJ.setPower(-0.5);

        while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy()) {
            angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
            telemetry.addData("Heading: ", angles.firstAngle);
            telemetry.addData("Roll: ", angles.secondAngle);
            telemetry.addData("Pitch", angles.thirdAngle);
            telemetry.update();
        }

        MotorSF.setPower(0);
        MotorSJ.setPower(0);
        MotorDF.setPower(0);
        MotorDJ.setPower(0);

        resetStartTime();

        while (opModeIsActive() && getRuntime() < 5) {
            telemetry.addData("encoder-fwd-end", MotorSF.getCurrentPosition() + "  busy=" + MotorSF.isBusy());
            telemetry.addData("encoder-fwd-end", MotorSJ.getCurrentPosition() + "  busy=" + MotorSJ.isBusy());
            telemetry.addData("encoder-fwd-end", MotorDF.getCurrentPosition() + "  busy=" + MotorDF.isBusy());
            telemetry.addData("encoder-fwd-end", MotorDJ.getCurrentPosition() + "  busy=" + MotorDJ.isBusy());
            telemetry.update();
            idle();
            //se verifica daca motoarele si-au indeplinit numarul de pulsatii
        }
        */
    }
    public void DiagonalaSJos(){
        MotorSF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorDJ.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        MotorSF.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorDJ.setMode(DcMotor.RunMode.RUN_TO_POSITION);

        MotorSF.setTargetPosition(-3155);
        MotorDJ.setTargetPosition(3155);

        MotorSF.setPower(-0.5);
        MotorDJ.setPower(0.5);
    }

    public void colectareSkyStone() {
        MotorSF.setPower(0.0);
        MotorSJ.setPower(0.0);
        MotorDF.setPower(0.0);
        MotorDJ.setPower(0.0);
        Servomotor1.setPosition(1);
        //daca senzorul detecteaza culoarea galben, servomotorul se deplaseaza la poz 1
    }

    public void diagonaladreapta() {
        MotorSF.setPower(0.5);
        MotorSJ.setPower(-0.5);
        MotorDF.setPower(0.5);
        MotorDJ.setPower(-0.5);
    }

    public void culoare1vedenegru() {
        Skystones[i] = 1;
        pozitiemotor = MotorDJ.getCurrentPosition();
        valoareskystone2 = 18947 - valoareskystone1;
        inapoi = pozitiemotor;
        Servomotor2.setPosition(1);
    }

    public void culoarenegrudarbratesteocupat() {
        Skystones[i] = 1;
        pozitiemotor2 = MotorDJ.getCurrentPosition();
        valoareskystone1 = 18947 - pozitiemotor2;
        Servomotor2.setPosition(1);
    }

    public void colectare() {
        Servomotor2.setPosition(0);
    }
}
//18947 tickuri de la zid pana dupa bridge
