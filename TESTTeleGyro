package org.firstinspires.ftc.teamcode;

import com.qualcomm.hardware.bosch.BNO055IMU;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.util.ElapsedTime;

import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
import org.firstinspires.ftc.robotcore.external.navigation.AxesOrder;
import org.firstinspires.ftc.robotcore.external.navigation.AxesReference;
import org.firstinspires.ftc.robotcore.external.navigation.Orientation;


/**
 * This file contains an minimal example of a Linear "OpMode". An OpMode is a 'program' that runs in either
 * the autonomous or the teleop period of an FTC match. The names of OpModes appear on the menu
 * of the FTC Driver Station. When an selection is made from the menu, the corresponding OpMode
 * class is instantiated on the Robot Controller and executed.
 *
 * This particular OpMode just executes a basic Tank Drive Teleop for a two wheeled robot
 * It includes all the skeletal structure that all linear OpModes contain.
 *
 * Use Android Studios to Copy this Class, and Paste it into your team's code folder with a new name.
 * Remove or comment out the @Disabled line to add this opmode to the Driver Station OpMode list
 */

@Autonomous(name="Test Gyro", group="Linear Opmode")
//@Disabled
public class TestTeleGYRO extends LinearOpMode {

    private ElapsedTime runtime = new ElapsedTime();

    DcMotor leftMotor;
    DcMotor rightMotor;
    BNO055IMU imu;
    Orientation angles;
    public int contor1=0;

    @Override
    public void runOpMode() {
        BNO055IMU.Parameters parameters = new BNO055IMU.Parameters();

        parameters.angleUnit = BNO055IMU.AngleUnit.DEGREES;
        parameters.calibrationDataFile = "BNO055IMUCalibration.json";

        imu = hardwareMap.get(BNO055IMU.class, "imu");
        imu.initialize(parameters);

        waitForStart();
        contor1 = 0;
        while (opModeIsActive() && !isStopRequested()) {

            while (opModeIsActive() && !isStopRequested()&& contor1<200) {
                recalibrare();
                telemetry.addData("Contor:", contor1);
                if (angles.firstAngle > -0.5 && angles.firstAngle < 0.5 && contor1 < 200) {
                    MoveStraight();
                    recalibrare();
                }if (contor1==100){
                    stop1();
                }
                recalibrare();
                if (angles.firstAngle < -0.5 && contor1 < 200) {
                    leftheadding();
                    recalibrare();
                }if (contor1==100){
                    stop1();
                }
                recalibrare();
                if (angles.firstAngle > 0.5 && contor1 < 200) {
                    rightheadding();
                    recalibrare();
                }else{ //stop1();
                    //    break;
                }if (contor1==200){
                    stop1();
                }
                recalibrare();
                if (contor1 == 200) {
                    {telemetry.addData("Status", "Am terminat boss");
                        stop1();
                        break;}
                }
            }
            telemetry.addData("Status", "Am terminat de executat");
            while (opModeIsActive() && !isStopRequested()&& contor1>200 && contor1<400) {
                recalibrarestanga();
                telemetry.addData("Contor:", contor1);
                if (angles.firstAngle>-89 && angles.firstAngle<-91 && contor1> 200 && contor1<400) {
                    MoveStraightstanga();
                    recalibrarestanga();
                }if (contor1==400){
                    stop1();
                }
                recalibrarestanga();
                if (angles.firstAngle <-89 && contor1<400 && contor1>200) {
                    leftheaddingstanga();
                    recalibrarestanga();
                }if (contor1==400){
                    stop1();
                }
                recalibrarestanga();
                if (angles.firstAngle >-91 && contor1<400 && contor1>200) {
                    rightheaddingstanga();
                    recalibrarestanga();
                }else{ //stop1();
                    //    break;
                }if (contor1==400){
                    stop1();
                }
                recalibrarestanga();
                if (contor1 == 400) {
                    {telemetry.addData("Status", "Am terminat boss");
                        stop1();
                        break;}
                }
            }
        }
    }

    public void MoveStraight() {
        recalibrare();
        contor1++;
        telemetry.addData("Status", "Drept");
        leftMotor = hardwareMap.dcMotor.get("motorstanga");
        rightMotor = hardwareMap.dcMotor.get("motordreapta");
        leftMotor.setDirection(DcMotorSimple.Direction.REVERSE);
        telemetry.addData("Contor:",contor1);
        waitForStart();
        runtime.reset();

        leftMotor.setPower(0.8);
        rightMotor.setPower(0.5);
        recalibrare();
        if (angles.firstAngle>-0.5 &&angles.firstAngle<0.5 && contor1<200)
        {recalibrare();
            MoveStraight();recalibrare();
        }
        if (angles.firstAngle<-0.5 && contor1<200)
        {
            recalibrare();
            leftheadding();recalibrare();
        }
        if (angles.firstAngle>0.5 && contor1<200){recalibrare();
            rightheadding();recalibrare();
        }
        recalibrare();
        if (contor1==200){
            stop1();
        }
        sleep(100);
        if (contor1==200){
            stop1();
        }
    }
    public void MoveStraightstanga() {
        recalibrarestanga();
        contor1++;
        telemetry.addData("Status", "Drept");
        leftMotor = hardwareMap.dcMotor.get("motorstanga");
        rightMotor = hardwareMap.dcMotor.get("motordreapta");
        leftMotor.setDirection(DcMotorSimple.Direction.REVERSE);
        telemetry.addData("Contor:",contor1);
        waitForStart();
        runtime.reset();

        leftMotor.setPower(0.8);
        rightMotor.setPower(0.8);
        recalibrarestanga();
        if (angles.firstAngle>-89 && angles.firstAngle<-91 && contor1> 200 && contor1<400)
        {recalibrarestanga();
            MoveStraightstanga();recalibrarestanga();
        }
        if (angles.firstAngle <-89 && contor1<400 && contor1>200)
        {
            recalibrarestanga();
            leftheaddingstanga();recalibrarestanga();
        }
        if (angles.firstAngle >-91 && contor1<400 && contor1>200){recalibrarestanga();
            rightheaddingstanga();recalibrarestanga();
        }
        recalibrarestanga();
        if (contor1==400){
            stop1();
        }
        sleep(10);
        if (contor1==400){
            stop1();
        }
    }
    public void leftheadding() {
        contor1++;
        recalibrare();
        telemetry.addData("Status", "Stanga");
        leftMotor = hardwareMap.dcMotor.get("motorstanga");
        rightMotor = hardwareMap.dcMotor.get("motordreapta");
        leftMotor.setDirection(DcMotorSimple.Direction.REVERSE);
        telemetry.addData("Contor:",contor1);
        double power1=0.5;
        double power2=0.8;
        leftMotor.setPower(power1);
        rightMotor.setPower(power2);
        recalibrare();
        if (angles.firstAngle>-1 && angles.firstAngle<1 && contor1<200){recalibrare();
            MoveStraight();recalibrare();
        }
        if (angles.firstAngle<-1 && contor1<200){
            leftheadding();recalibrare();
        }
        if (angles.firstAngle>1 && contor1<200){
            rightheadding();recalibrare();
        }
        if (contor1==200){
            stop1();
        }
        sleep(100);
        if (contor1==200){
            stop1();
        }
    }
    public void leftheaddingstanga() {
        contor1++;
        recalibrarestanga();
        telemetry.addData("Status", "Stanga");
        leftMotor = hardwareMap.dcMotor.get("motorstanga");
        rightMotor = hardwareMap.dcMotor.get("motordreapta");
        leftMotor.setDirection(DcMotorSimple.Direction.REVERSE);
        telemetry.addData("Contor:",contor1);
        double power1=0;
        double power2=0.8;
        leftMotor.setPower(power1);
        rightMotor.setPower(power2);
        recalibrarestanga();
        if (angles.firstAngle>-89 && angles.firstAngle<-91 && contor1> 200 && contor1<400){recalibrarestanga();
            MoveStraightstanga();recalibrarestanga();
        }
        if (angles.firstAngle <-89 && contor1<400 && contor1>200){
            leftheaddingstanga();recalibrarestanga();
        }
        if (angles.firstAngle >-91 && contor1<400 && contor1>200){
            rightheaddingstanga();recalibrarestanga();
        }
        if (contor1==400){
            stop1();
        }
        sleep(10);
        if (contor1==400){
            stop1();
        }
    }
    public void rightheadding(){if (contor1==200){
        stop1();
    }
        contor1++;
        recalibrare();
        telemetry.addData("Status", "Stanga");
        leftMotor = hardwareMap.dcMotor.get("motorstanga");
        rightMotor = hardwareMap.dcMotor.get("motordreapta");
        leftMotor.setDirection(DcMotorSimple.Direction.REVERSE);
        telemetry.addData("Contor:",contor1);
        double power3=0.8;
        double power4=0.5;
        leftMotor.setPower(power3);
        rightMotor.setPower(power4);
        recalibrare();
        if (angles.firstAngle>-0.5 &&angles.firstAngle<0.5 && contor1<200){recalibrare();
            MoveStraight();recalibrare();
        }
        if (angles.firstAngle<-0.5 && contor1<200){
            leftheadding();recalibrare();
        }
        if (angles.firstAngle>0.5 && contor1<200){
            rightheadding();recalibrare();
        }
        if (contor1==200){
            stop1();
        }
        sleep(100);
        if (contor1==200){
            stop1();
        }
    }
    public void rightheaddingstanga(){if (contor1==400){
        stop1();
    }
        contor1++;
        recalibrarestanga();
        telemetry.addData("Status", "Stanga");
        leftMotor = hardwareMap.dcMotor.get("motorstanga");
        rightMotor = hardwareMap.dcMotor.get("motordreapta");
        leftMotor.setDirection(DcMotorSimple.Direction.REVERSE);
        telemetry.addData("Contor:",contor1);
        double power3=0.8;
        double power4=0;
        leftMotor.setPower(power3);
        rightMotor.setPower(power4);
        recalibrarestanga();
        if (angles.firstAngle>-89 && angles.firstAngle<-91 && contor1> 200 && contor1<400){recalibrarestanga();
            MoveStraightstanga();recalibrarestanga();
        }
        if (angles.firstAngle <-89 && contor1<400 && contor1>200){
            leftheaddingstanga();recalibrarestanga();
        }
        if (angles.firstAngle >-91 && contor1<400 && contor1>200){
            rightheaddingstanga();recalibrarestanga();
        }
        if (contor1==400){
            stop1();
        }
        sleep(10);
        if (contor1==400){
            stop1();
        }
    }
    public void recalibrare() {
        if (contor1==200){
            stop1();
        }
        contor1++;
        telemetry.addData("Contor:",contor1);
        angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
        telemetry.addData("Heading: ", angles.firstAngle);
        telemetry.addData("Roll: ", angles.secondAngle);
        telemetry.addData("Pitch: ", angles.thirdAngle);
        telemetry.update();
    }
    public void recalibrarestanga() {
        if (contor1==400){
            stop1();
        }
        contor1++;
        telemetry.addData("Contor:",contor1);
        angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
        telemetry.addData("Heading: ", angles.firstAngle);
        telemetry.addData("Roll: ", angles.secondAngle);
        telemetry.addData("Pitch: ", angles.thirdAngle);
        telemetry.update();
    }

    public void stop1(){
        leftMotor.setPower(0);
        rightMotor.setPower(0);
    }
 }
