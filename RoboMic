/* Copyright (c) 2017 FIRST. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted (subject to the limitations in the disclaimer below) provided that
 * the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list
 * of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice, this
 * list of conditions and the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 *
 * Neither the name of FIRST nor the names of its contributors may be used to endorse or
 * promote products derived from this software without specific prior written permission.
 *
 * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS
 * LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.PWMOutput;
import com.qualcomm.robotcore.util.ElapsedTime;


/**
 * This file contains an minimal example of a Linear "OpMode". An OpMode is a 'program' that runs in either
 * the autonomous or the teleop period of an FTC match. The names of OpModes appear on the menu
 * of the FTC Driver Station. When an selection is made from the menu, the corresponding OpMode
 * class is instantiated on the Robot Controller and executed.
 *
 * This particular OpMode just executes a basic Tank Drive Teleop for a two wheeled robot
 * It includes all the skeletal structure that all linear OpModes contain.
 *
 * Use Android Studios to Copy this Class, and Paste it into your team's code folder with a new name.
 * Remove or comment out the @Disabled line to add this opmode to the Driver Station OpMode list
 */

@TeleOp(name="RoboMic", group="Linear Opmode")

public class RoboMic extends LinearOpMode {

    // Declare OpMode members.
    private ElapsedTime runtime = new ElapsedTime();
    private DcMotor MotorTleft = null;
    private DcMotor MotorBleft = null;
    private DcMotor MotorTright = null;
    private DcMotor MotorBright = null;
    double power = 0.7;

    @Override
    public void runOpMode() {
        telemetry.addData("Status", "Initialized");
        telemetry.update();

        MotorTleft = hardwareMap.get(DcMotor.class, "MotorSsus");
        MotorBleft = hardwareMap.get(DcMotor.class, "MotorSjos");
        MotorTright = hardwareMap.get(DcMotor.class, "MotorDsus");
        MotorBright = hardwareMap.get(DcMotor.class, "MotorDjos");

        MotorTleft.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        MotorBleft.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        MotorTright.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        MotorBright.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

        MotorTright.setDirection(DcMotorSimple.Direction.REVERSE);
        MotorBright.setDirection(DcMotorSimple.Direction.REVERSE);

        waitForStart();
        if (opModeIsActive()) {
            while (opModeIsActive()) {

                while (gamepad1.dpad_up) {
                    MotorTleft.setPower(-power);
                    MotorBright.setPower(-power);
                    if (gamepad1.left_trigger != 0)
                        power = 0.4;
                    if (gamepad1.left_trigger == 0)
                        power = 0.7;
                    if (!(gamepad1.dpad_up)) {
                        MotorTleft.setPower(0);
                        MotorBleft.setPower(0);
                        MotorTright.setPower(0);
                        MotorBright.setPower(0);
                        power = 0.7;
                        break;
                    }
                }

                while (gamepad1.dpad_down) {
                    MotorTleft.setPower(power);
                    MotorBright.setPower(power);

                    MotorBright.setPower(power);
                    if (gamepad1.left_trigger != 0)
                        power = 0.4;
                    if (gamepad1.left_trigger == 0)
                        power = 0.7;
                    if (!(gamepad1.dpad_up)) {
                        MotorTleft.setPower(0);
                        MotorBleft.setPower(0);
                        MotorTright.setPower(0);
                        MotorBright.setPower(0);
                        power = 0.7;
                        break;
                    }

                }

                while (gamepad1.dpad_left) {
                    MotorBleft.setPower(-power);
                    MotorTright.setPower(-power);
                    if (gamepad1.left_trigger != 0)
                        power = 0.4;
                    if (gamepad1.left_trigger == 0)
                        power = 0.7;
                    if (!(gamepad1.dpad_up)) {
                        MotorTleft.setPower(0);
                        MotorBleft.setPower(0);
                        MotorTright.setPower(0);
                        MotorBright.setPower(0);
                        power = 0.7;
                        break;

                    }
                }


                while (gamepad1.dpad_right) {
                    MotorBleft.setPower(power);
                    MotorTright.setPower(power);
                    if (gamepad1.left_trigger != 0)
                        power = 0.4;
                    if (gamepad1.left_trigger == 0)
                        power = 0.7;
                    if (!(gamepad1.dpad_up)) {
                        MotorTleft.setPower(0);
                        MotorBleft.setPower(0);
                        MotorTright.setPower(0);
                        MotorBright.setPower(0);
                        power = 0.7;
                        break;

                    }
                }

                while (gamepad1.left_bumper){
                    MotorTleft.setPower(power);
                    MotorBleft.setPower(power);
                    MotorTright.setPower(-power);
                    MotorBright.setPower(-power);
                    if (gamepad1.left_trigger != 0)
                        power = 0.4;
                    if (gamepad1.left_trigger == 0)
                        power = 0.7;
                    if (!(gamepad1.dpad_up)) {
                        MotorTleft.setPower(0);
                        MotorBleft.setPower(0);
                        MotorTright.setPower(0);
                        MotorBright.setPower(0);
                        power = 0.7;
                        break;

                    }
                }

                while (gamepad1.right_bumper){
                    MotorTleft.setPower(-power);
                    MotorBleft.setPower(-power);
                    MotorTright.setPower(power);
                    MotorBright.setPower(power);
                    if (gamepad1.left_trigger != 0)
                        power = 0.4;
                    if (gamepad1.left_trigger == 0)
                        power = 0.7;
                    if (!(gamepad1.dpad_up)) {
                        MotorTleft.setPower(0);
                        MotorBleft.setPower(0);
                        MotorTright.setPower(0);
                        MotorBright.setPower(0);
                        power = 0.7;
                        break;

                    }
                }

                telemetry.addData("power", power);
                telemetry.update();



            }
        }
    }
}

