package org.firstinspires.ftc.teamcode;

import android.app.Activity;
import android.graphics.Color;
import android.view.View;
import com.qualcomm.hardware.bosch.BNO055IMU;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.ColorSensor;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.Servo;
import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
import org.firstinspires.ftc.robotcore.external.navigation.AxesOrder;
import org.firstinspires.ftc.robotcore.external.navigation.AxesReference;
import org.firstinspires.ftc.robotcore.external.navigation.DistanceUnit;
import org.firstinspires.ftc.robotcore.external.navigation.Orientation;

import java.util.Locale;

@Autonomous (name= "CodNouAlbastru1")
public class CodNouAlbastru extends LinearOpMode {
    BNO055IMU imu;
    Orientation angles;
    public DcMotor MotorDF = null;
    public DcMotor MotorSF = null;
    public DcMotor MotorDJ = null;
    public DcMotor MotorSJ = null;
    ColorSensor sensorColor;
    ColorSensor sensorColor2;
    public Servo Servomotor1 = null;
    public Servo Servomotor2 = null;
    int[] Skystones = new int[6];
    int i = 0;
    int brat = 0;
    int valoareskystone1 = 0;
    int valoareskystone2 = 0;
    int pozitiemotor = 0;
    int pozitiemotor2 = 0;
    int inapoi = 0;
    int Piatra1 =0;
    int Piatra2 =0;
    int Piatra3 =0;
    int Piatra4 =0;
    int Piatra5 =0;
    int Piatra6 =0;

    @Override
    public void runOpMode() {

        BNO055IMU.Parameters parameters = new BNO055IMU.Parameters();
        parameters.angleUnit = BNO055IMU.AngleUnit.DEGREES;
        //am configurat gyroul integrat si i-am definit unitatea de masura

        MotorDF = hardwareMap.dcMotor.get("Tright_drive");
        MotorDJ = hardwareMap.dcMotor.get("Bright_drive");
        MotorSF = hardwareMap.dcMotor.get("Tleft_drive");
        MotorSJ = hardwareMap.dcMotor.get("Bleft_drive");

        MotorSJ.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        MotorSF.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        MotorDJ.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        MotorDF.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        //am regasit printe elementele robotului conectate le hub cele 4 motoare

        Servomotor1 = hardwareMap.servo.get("Servo1");
        Servomotor2 = hardwareMap.servo.get("Servo2");
        //servomotorul

        sensorColor = hardwareMap.get(ColorSensor.class, "Rsensor_color");
        sensorColor2 = hardwareMap.get(ColorSensor.class, "Lsensor_color");
        //senzorul de culoare

        MotorDF.setDirection(DcMotorSimple.Direction.REVERSE);
        MotorDJ.setDirection(DcMotorSimple.Direction.REVERSE);
        //am declarat ca motoarele de pe partea stanga se vormisca in sens invers

        MotorSF.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        MotorSJ.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        MotorDF.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
        MotorDJ.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        MotorSF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorSJ.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorDF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorDJ.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        //se reseteaza valorile encoderelor pentru cele doua motoare de stanga la 0
        sensorColor.enableLed(true);

        //motoarele de stanga isis iau ca referinta pozitia initiala

        float hsvValues[] = {0F, 0F, 0F};

        final float values[] = hsvValues;

        final double SCALE_FACTOR = 255;
        /*initializam valorile RBG intr-un array(vector)
        aceste valori percepute in RGB se vor inmulgii cu o constanta=255
        astefl vectorul va contive valori hsv
        */



        int relativeLayoutId = hardwareMap.appContext.getResources().getIdentifier("RelativeLayout", "id", hardwareMap.appContext.getPackageName());
        final View relativeLayout = ((Activity) hardwareMap.appContext).findViewById(relativeLayoutId);
        /*se initializeaza culoarea initiala alba a robotcontrollerului
        astefl atat timp cat senzorul va identifica o culoare, ecranul telefonului isi va schimba culoarea
        folosind datele primite din telemetrie
         */

        imu = hardwareMap.get(BNO055IMU.class, "imu");
        imu.initialize(parameters);
        //am identificat gyroul integrat printre componentele robotului

        telemetry.addData("Mode", "Waiting");
        telemetry.update();
        //am actuaizat datele din telemetrie

        waitForStart();
        telemetry.addData("Mode", "running");
        telemetry.update();
        DiagonalaSV(0.5,3055);
        while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy()) {
            angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
            telemetry.addData("Heading: ", angles.firstAngle);
            telemetry.addData("Roll: ", angles.secondAngle);
            telemetry.addData("Pitch", angles.thirdAngle);
            telemetry.update();
        }
        MotorSF.setPower(0);
        MotorSJ.setPower(0);
        MotorDF.setPower(0);
        MotorDJ.setPower(0);
        sleep(500);

        ApropierEst(0.2,335);
        while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy()) {
            angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
            telemetry.addData("Heading: ", angles.firstAngle);
            telemetry.addData("Roll: ", angles.secondAngle);
            telemetry.addData("Pitch", angles.thirdAngle);
            telemetry.update();
        }
        MotorSF.setPower(0);
        MotorSJ.setPower(0);
        MotorDF.setPower(0);
        MotorDJ.setPower(0);
        sleep(500);


        Color.RGBToHSV((int) (sensorColor2.red() * SCALE_FACTOR),
                (int) (sensorColor2.green() * SCALE_FACTOR),
                (int) (sensorColor2.blue() * SCALE_FACTOR),
                hsvValues);

        /*Color.RGBToHSV((int) (sensorColor.red() * SCALE_FACTOR),
                (int) (sensorColor.green() * SCALE_FACTOR),
                (int) (sensorColor.blue() * SCALE_FACTOR),
                hsvValues);
            */
        telemetry.addData("Alpha2", sensorColor2.alpha());
        telemetry.addData("Red2  ", sensorColor2.red());
        telemetry.addData("Green2", sensorColor2.green());
        telemetry.addData("Blue2 ", sensorColor2.blue());
        telemetry.addData("Hue2", hsvValues[0]);

        telemetry.addData("Alpha", sensorColor.alpha());
        telemetry.addData("Red  ", sensorColor.red());
        telemetry.addData("Green", sensorColor.green());
        telemetry.addData("Blue ", sensorColor.blue());
        telemetry.addData("Hue", hsvValues[0]);

        telemetry.addData("Servo",Servomotor1.getPosition());

        if (sensorColor2.red()<125 && sensorColor2.green()<125){
            telemetry.addData("Alpha2", sensorColor2.alpha());
            telemetry.addData("Red2  ", sensorColor2.red());
            telemetry.addData("Green2", sensorColor2.green());
            telemetry.addData("Blue2 ", sensorColor2.blue());
            telemetry.addData("Hue2", hsvValues[0]);
            telemetry.update();
            Servomotor2.setPosition(0.5);
            sleep(750);
            ApropierVest(0.3,400);
            while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy()) {
                angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
                telemetry.addData("Heading: ", angles.firstAngle);
                telemetry.addData("Roll: ", angles.secondAngle);
                telemetry.addData("Pitch", angles.thirdAngle);
                telemetry.update();
            }
            MotorSF.setPower(0);
            MotorSJ.setPower(0);
            MotorDF.setPower(0);
            MotorDJ.setPower(0);
            sleep(500);
            telemetry.addData("Alpha2", sensorColor2.alpha());
            telemetry.addData("Red2  ", sensorColor2.red());
            telemetry.addData("Green2", sensorColor2.green());
            telemetry.addData("Blue2 ", sensorColor2.blue());
            telemetry.addData("Hue2", hsvValues[0]);
            telemetry.update();
            InainteN(0.5,4550);
            while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy()) {
                angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
                telemetry.addData("Heading: ", angles.firstAngle);
                telemetry.addData("Roll: ", angles.secondAngle);
                telemetry.addData("Pitch", angles.thirdAngle);
                telemetry.update();
            }
            MotorSF.setPower(0);
            MotorSJ.setPower(0);
            MotorDF.setPower(0);
            MotorDJ.setPower(0);
            sleep(500);
            telemetry.addData("Alpha2", sensorColor2.alpha());
            telemetry.addData("Red2  ", sensorColor2.red());
            telemetry.addData("Green2", sensorColor2.green());
            telemetry.addData("Blue2 ", sensorColor2.blue());
            telemetry.addData("Hue2", hsvValues[0]);
            telemetry.update();
            Servomotor2.setPosition(-1);
        }
        telemetry.update();

        telemetry.addData("Alpha2", sensorColor2.alpha());
        telemetry.addData("Red2  ", sensorColor2.red());
        telemetry.addData("Green2", sensorColor2.green());
        telemetry.addData("Blue2 ", sensorColor2.blue());
        telemetry.addData("Hue2", hsvValues[0]);

        telemetry.addData("Alpha", sensorColor.alpha());
        telemetry.addData("Red  ", sensorColor.red());
        telemetry.addData("Green", sensorColor.green());
        telemetry.addData("Blue ", sensorColor.blue());
        telemetry.addData("Hue", hsvValues[0]);

        telemetry.addData("Servo",Servomotor1.getPosition());
        telemetry.update();

        InainteN(0.3,841);
        while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy()) {
            angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
            telemetry.addData("Heading: ", angles.firstAngle);
            telemetry.addData("Roll: ", angles.secondAngle);
            telemetry.addData("Pitch", angles.thirdAngle);
            telemetry.update();
        }
        MotorSF.setPower(0);
        MotorSJ.setPower(0);
        MotorDF.setPower(0);
        MotorDJ.setPower(0);
        sleep(500);

     /*   InainteN(0.3,1550);
        while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy()) {
            angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
            telemetry.addData("Heading: ", angles.firstAngle);
            telemetry.addData("Roll: ", angles.secondAngle);
            telemetry.addData("Pitch", angles.thirdAngle);
            telemetry.update();
        }
        MotorSF.setPower(0);
        MotorSJ.setPower(0);
        MotorDF.setPower(0);
        MotorDJ.setPower(0);
        sleep(500);
        InainteN(0.3,1550);
        while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy()) {
            angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
            telemetry.addData("Heading: ", angles.firstAngle);
            telemetry.addData("Roll: ", angles.secondAngle);
            telemetry.addData("Pitch", angles.thirdAngle);
            telemetry.update();
        }
        MotorSF.setPower(0);
        MotorSJ.setPower(0);
        MotorDF.setPower(0);
        MotorDJ.setPower(0);
        sleep(500);
        InainteN(0.3,1550);
        while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy()) {
            angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
            telemetry.addData("Heading: ", angles.firstAngle);
            telemetry.addData("Roll: ", angles.secondAngle);
            telemetry.addData("Pitch", angles.thirdAngle);
            telemetry.update();
        }
        MotorSF.setPower(0);
        MotorSJ.setPower(0);
        MotorDF.setPower(0);
        MotorDJ.setPower(0);
        sleep(500);

        telemetry.addData("posite",MotorDF.getCurrentPosition());
        telemetry.addData("posite",MotorDJ.getCurrentPosition());
        telemetry.addData("posite",MotorSF.getCurrentPosition());
        telemetry.addData("posite",MotorSJ.getCurrentPosition());
        telemetry.update();




       /* Servomotor1.setPosition(0);

        while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy())
        //cat timp opMode este activ si cele doua motoare sunt ocupate
        {
            Color.RGBToHSV((int) (sensorColor.red() * SCALE_FACTOR),
                    (int) (sensorColor.green() * SCALE_FACTOR),
                    (int) (sensorColor.blue() * SCALE_FACTOR),
                    hsvValues);

            //am masurat datele senzorului de culoare
            telemetry.addData("Alpha", sensorColor.alpha());
            telemetry.addData("Red  ", sensorColor.red());
            telemetry.addData("Green", sensorColor.green());
            telemetry.addData("Blue ", sensorColor.blue());
            telemetry.addData("Hue", hsvValues[0]);
            //am updatat telemetria pentru senzorul de culoare


            relativeLayout.post(new Runnable() {
                public void run() {
                    relativeLayout.setBackgroundColor(Color.HSVToColor(0xff, values));

                }
            });
            angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
            telemetry.addData("Heading: ", angles.firstAngle);
            telemetry.addData("Roll: ", angles.secondAngle);
            telemetry.addData("Pitch", angles.thirdAngle);
            telemetry.addData("encoder-fwd", MotorSF.getCurrentPosition() + "  busy=" + MotorSF.isBusy());
            telemetry.addData("encoder-fwd", MotorSJ.getCurrentPosition() + "  busy=" + MotorSJ.isBusy());
            telemetry.addData("encoder-fwd", MotorDF.getCurrentPosition() + "  busy=" + MotorDF.isBusy());
            telemetry.addData("encoder-fwd", MotorDJ.getCurrentPosition() + "  busy=" + MotorDJ.isBusy());
            //am obtinut datele despre pozitia robotului pe axele XYZ cu ajutorul Gyroului
            telemetry.update();

            if (sensorColor.red() == 0 && sensorColor.blue() == 0 && sensorColor.green() == 0 && brat == 0) {
                culoare1vedenegru();
                colectareSkyStone();
                brat = 1;
            } else if (sensorColor.red() == 0 && sensorColor.blue() == 0 && sensorColor.green() == 0 && brat == 1) {
                culoarenegrudarbratesteocupat();
                brat = 0;
            }

            idle();
            i++;
            //la finalul buclei while robotul se opreste
        }
        MotorSF.setPower(0);
        MotorSJ.setPower(0);
        MotorDF.setPower(0);
        MotorDJ.setPower(0);

        resetStartTime();
        //timpul este resetat

        while (opModeIsActive() && getRuntime() < 5) {
            telemetry.addData("encoder-fwd-end", MotorSF.getCurrentPosition() + "  busy=" + MotorSF.isBusy());
            telemetry.addData("encoder-fwd-end", MotorSJ.getCurrentPosition() + "  busy=" + MotorSJ.isBusy());
            telemetry.addData("encoder-fwd-end", MotorDF.getCurrentPosition() + "  busy=" + MotorDF.isBusy());
            telemetry.addData("encoder-fwd-end", MotorDJ.getCurrentPosition() + "  busy=" + MotorDJ.isBusy());
            telemetry.update();
            idle();
            //se verifica daca motoarele si-au indeplinit numarul de pulsatii
        }
        MotorSF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorSJ.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorDF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorDJ.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        MotorSF.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorSJ.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorDF.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorDJ.setMode(DcMotor.RunMode.RUN_TO_POSITION);

        MotorSF.setTargetPosition(valoareskystone1);
        MotorSJ.setTargetPosition(valoareskystone1);
        MotorDF.setTargetPosition(valoareskystone1);
        MotorDJ.setTargetPosition(valoareskystone1);

        MotorSF.setPower(0.5);
        MotorSJ.setPower(0.5);
        MotorDF.setPower(0.5);
        MotorDJ.setPower(0.5);

        while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy()) {
            angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
            telemetry.addData("Heading: ", angles.firstAngle);
            telemetry.addData("Roll: ", angles.secondAngle);
            telemetry.addData("Pitch", angles.thirdAngle);
            telemetry.update();
        }
        colectareSkyStone();

        resetStartTime();

        while (opModeIsActive() && getRuntime() < 5) {
            telemetry.addData("encoder-fwd-end", MotorSF.getCurrentPosition() + "  busy=" + MotorSF.isBusy());
            telemetry.addData("encoder-fwd-end", MotorSJ.getCurrentPosition() + "  busy=" + MotorSJ.isBusy());
            telemetry.addData("encoder-fwd-end", MotorDF.getCurrentPosition() + "  busy=" + MotorDF.isBusy());
            telemetry.addData("encoder-fwd-end", MotorDJ.getCurrentPosition() + "  busy=" + MotorDJ.isBusy());
            telemetry.update();
            idle();
            //se verifica daca motoarele si-au indeplinit numarul de pulsatii
        }

        MotorSF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorSJ.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorDF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorDJ.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        MotorSF.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorSJ.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorDF.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorDJ.setMode(DcMotor.RunMode.RUN_TO_POSITION);

        MotorSF.setTargetPosition(valoareskystone2);
        MotorSJ.setTargetPosition(valoareskystone2);
        MotorDF.setTargetPosition(valoareskystone2);
        MotorDJ.setTargetPosition(valoareskystone2);

        MotorSF.setPower(0.5);
        MotorSJ.setPower(0.5);
        MotorDF.setPower(0.5);
        MotorDJ.setPower(0.5);

        while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy()) {
            angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
            telemetry.addData("Heading: ", angles.firstAngle);
            telemetry.addData("Roll: ", angles.secondAngle);
            telemetry.addData("Pitch", angles.thirdAngle);
            telemetry.update();
        }
        colectareSkyStone();

        resetStartTime();
        while (opModeIsActive() && getRuntime() < 5) {
            telemetry.addData("encoder-fwd-end", MotorSF.getCurrentPosition() + "  busy=" + MotorSF.isBusy());
            telemetry.addData("encoder-fwd-end", MotorSJ.getCurrentPosition() + "  busy=" + MotorSJ.isBusy());
            telemetry.addData("encoder-fwd-end", MotorDF.getCurrentPosition() + "  busy=" + MotorDF.isBusy());
            telemetry.addData("encoder-fwd-end", MotorDJ.getCurrentPosition() + "  busy=" + MotorDJ.isBusy());
            telemetry.update();
            idle();
            //se verifica daca motoarele si-au indeplinit numarul de pulsatii
        }

        MotorSF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorSJ.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorDF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorDJ.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        MotorSF.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorSJ.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorDF.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorDJ.setMode(DcMotor.RunMode.RUN_TO_POSITION);

        MotorSF.setTargetPosition(inapoi);
        MotorSJ.setTargetPosition(inapoi);
        MotorDF.setTargetPosition(inapoi);
        MotorDJ.setTargetPosition(inapoi);

        MotorSF.setPower(-0.5);
        MotorSJ.setPower(-0.5);
        MotorDF.setPower(-0.5);
        MotorDJ.setPower(-0.5);

        while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy()) {
            angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
            telemetry.addData("Heading: ", angles.firstAngle);
            telemetry.addData("Roll: ", angles.secondAngle);
            telemetry.addData("Pitch", angles.thirdAngle);
            telemetry.update();
        }

        MotorSF.setPower(0);
        MotorSJ.setPower(0);
        MotorDF.setPower(0);
        MotorDJ.setPower(0);

        resetStartTime();

        while (opModeIsActive() && getRuntime() < 5) {
            telemetry.addData("encoder-fwd-end", MotorSF.getCurrentPosition() + "  busy=" + MotorSF.isBusy());
            telemetry.addData("encoder-fwd-end", MotorSJ.getCurrentPosition() + "  busy=" + MotorSJ.isBusy());
            telemetry.addData("encoder-fwd-end", MotorDF.getCurrentPosition() + "  busy=" + MotorDF.isBusy());
            telemetry.addData("encoder-fwd-end", MotorDJ.getCurrentPosition() + "  busy=" + MotorDJ.isBusy());
            telemetry.update();
            idle();
            //se verifica daca motoarele si-au indeplinit numarul de pulsatii
        }
*/
    }
    public void DiagonalaSV(double p,int t){
        MotorSF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorSJ.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorDF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorDJ.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        MotorSF.setTargetPosition(-t);
        MotorSJ.setTargetPosition(t);
        MotorDF.setTargetPosition(t);
        MotorDJ.setTargetPosition(-t);

        MotorSF.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorSJ.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorDF.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorDJ.setMode(DcMotor.RunMode.RUN_TO_POSITION);

        MotorSF.setPower(p);
        MotorDJ.setPower(p);
    }
    public void InainteN(double p,int t){

        MotorSF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorSJ.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorDF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorDJ.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        MotorSF.setTargetPosition(t);
        MotorSJ.setTargetPosition(t);
        MotorDF.setTargetPosition(t);
        MotorDJ.setTargetPosition(t);

        MotorSF.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorSJ.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorDF.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorDJ.setMode(DcMotor.RunMode.RUN_TO_POSITION);

        MotorSF.setPower(p);
        MotorSJ.setPower(p);
        MotorDF.setPower(p);
        MotorDJ.setPower(p);
    }

    public void ApropierEst(double p,int t){
        MotorSF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorSJ.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorDF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorDJ.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        MotorSF.setTargetPosition(-t);
        MotorSJ.setTargetPosition(t);
        MotorDF.setTargetPosition(t);
        MotorDJ.setTargetPosition(-t);

        MotorSF.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorSJ.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorDF.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorDJ.setMode(DcMotor.RunMode.RUN_TO_POSITION);

        MotorSF.setPower(p);
        MotorSJ.setPower(p);
        MotorDF.setPower(p);
        MotorDJ.setPower(p);
    }
    public void ApropierVest(double p,int t) {
        MotorSF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorSJ.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorDF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorDJ.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);

        MotorSF.setTargetPosition(t);
        MotorSJ.setTargetPosition(-t);
        MotorDF.setTargetPosition(-t);
        MotorDJ.setTargetPosition(t);

        MotorSF.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorSJ.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorDF.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorDJ.setMode(DcMotor.RunMode.RUN_TO_POSITION);

        MotorSF.setPower(p);
        MotorSJ.setPower(p);
        MotorDF.setPower(p);
        MotorDJ.setPower(p);
    }


        public void colectareSkyStone() {
        MotorSF.setPower(0.0);
        MotorSJ.setPower(0.0);
        MotorDF.setPower(0.0);
        MotorDJ.setPower(0.0);
        Servomotor1.setPosition(0);
        //daca senzorul detecteaza culoarea galben, servomotorul se deplaseaza la poz 1
    }

    public void diagonaladreapta() {
        MotorSF.setPower(0.5);
        MotorSJ.setPower(-0.5);
        MotorDF.setPower(0.5);
        MotorDJ.setPower(-0.5);
    }

    public void culoare1vedenegru() {
        Skystones[i] = 1;
        pozitiemotor = MotorDJ.getCurrentPosition();
        valoareskystone2 = 18947 - valoareskystone1;
        inapoi = pozitiemotor;
        Servomotor2.setPosition(1);
    }

    public void culoarenegrudarbratesteocupat() {
        Skystones[i] = 1;
        pozitiemotor2 = MotorDJ.getCurrentPosition();
        valoareskystone1 = 18947 - pozitiemotor2;
        Servomotor2.setPosition(1);
    }

    public void colectare() {
        Servomotor2.setPosition(0);
    }
}
//18947 tickuri de la zid pana dupa bridge
