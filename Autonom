package org.firstinspires.ftc.teamcode;


import android.app.Activity;
import android.graphics.Color;
import android.view.View;

import com.qualcomm.hardware.bosch.BNO055IMU;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.ColorSensor;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.Servo;

import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
import org.firstinspires.ftc.robotcore.external.navigation.AxesOrder;
import org.firstinspires.ftc.robotcore.external.navigation.AxesReference;
import org.firstinspires.ftc.robotcore.external.navigation.Orientation;

@Autonomous (name= "CodNou")
public class CodNou extends LinearOpMode {
    BNO055IMU imu;
    Orientation angles;
    public DcMotor MotorDF = null;
    public DcMotor MotorSF = null;
    public DcMotor MotorDJ = null;
    public DcMotor MotorSJ = null;
    ColorSensor sensorColor;
    public Servo Servomotor1 = null;
    public Servo Servomotor2 = null;
    ColorSensor sensorColor2;
    int[] Skystones = new int[6];
    int i = 0;
    int brat = 0;
    int valoareskystone1 = 0;
    int valoareskystone2 = 0;
    int pozitiemotor = 0;


    @Override
    public void runOpMode() {
        BNO055IMU.Parameters parameters = new BNO055IMU.Parameters();
        parameters.angleUnit = BNO055IMU.AngleUnit.DEGREES;
        //am configurat gyroul integrat si i-am definit unitatea de masura

        MotorDF = hardwareMap.dcMotor.get("Tright_drive");
        MotorDJ = hardwareMap.dcMotor.get("Bright_drive");
        MotorSF = hardwareMap.dcMotor.get("Tleft_drive");
        MotorSJ = hardwareMap.dcMotor.get("Bleft_drive");
        MotorSJ.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        MotorSF.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        MotorDJ.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        MotorDF.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        //am regasit printe elementele robotului conectate le hub cele 4 motoare

        Servomotor1 = hardwareMap.servo.get("Servo1");
        Servomotor2 = hardwareMap.servo.get("Servo2");
        //servomotorul

        sensorColor = hardwareMap.get(ColorSensor.class, "Rsensor_color");
        sensorColor2 = hardwareMap.get(ColorSensor.class, "Lsensor_color2");
        //senzorul de culoare

        MotorSF.setDirection(DcMotorSimple.Direction.REVERSE);
        MotorSJ.setDirection(DcMotorSimple.Direction.REVERSE);
        //am declarat ca motoarele de pe partea stanga se vormisca in sens invers

        MotorSF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorSJ.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorDF.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        MotorDJ.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        //se reseteaza valorile encoderelor pentru cele doua motoare de stanga la 0

        MotorSF.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorSJ.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorDF.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        MotorDJ.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        //motoarele de stanga isis iau ca referinta pozitia initiala

        float hsvValues[] = {0F, 0F, 0F};

        final float values[] = hsvValues;

        final double SCALE_FACTOR = 255;
        /*initializam valorile RBG intr-un array(vector)
        aceste valori percepute in RGB se vor inmulgii cu o constanta=255
        astefl vectorul va contive valori hsv
        */

        int relativeLayoutId = hardwareMap.appContext.getResources().getIdentifier("RelativeLayout", "id", hardwareMap.appContext.getPackageName());
        final View relativeLayout = ((Activity) hardwareMap.appContext).findViewById(relativeLayoutId);
        /*se initializeaza culoarea initiala alba a robotcontrollerului
        astefl atat timp cat senzorul va identifica o culoare, ecranul telefonului isi va schimba culoarea
        folosind datele primite din telemetrie
         */

        imu = hardwareMap.get(BNO055IMU.class, "imu");
        imu.initialize(parameters);
        //am identificat gyroul integrat printre componentele robotului

        telemetry.addData("Mode", "Waiting");
        telemetry.update();
        //am actuaizat datele din telemetrie

        waitForStart();
        telemetry.addData("Mode", "running");
        telemetry.update();
        MotorSF.setTargetPosition(3155);
        MotorSJ.setTargetPosition(3155);
        MotorDF.setTargetPosition(3155);
        MotorDJ.setTargetPosition(3155);
        //am setat pozitia motoarelor care utilizeaza encodere la destinatie la care trebuie sa ajunga
        MotorSF.setPower(1);
        MotorSJ.setPower(0);
        MotorDF.setPower(0);
        MotorDJ.setPower(-1);
        while (opModeIsActive() && !isStopRequested() && MotorSF.isBusy() && MotorSJ.isBusy() && MotorDF.isBusy() && MotorDJ.isBusy()) {
            telemetry.update();
        }
        }
